openapi: 3.0.3

info:
  title: ESN GA Candidates app
  version: 1.0.9
  contact:
    name: Matteo Carbone
    email: email@matteocarbone.com
    url: https://matteocarbone.com

servers:
  - url: https://api.esn-ga.link/{environment}
    variables:
      environment:
        enum: [dev, prod]
        default: dev
        description: The API stage

externalDocs:
  description: Models documentation
  url: https://github.com/uatisdeproblem/esn-ga/tree/main/back-end/src/models

tags:
  - name: Login
    description: Access the platform
  - name: Configurations
    description: The platfrom's configurations
  - name: Categories
    description: The platform's categories
  - name: Events
    description: The platform's events
  - name: Topics
    description: The platform's topics for Q&As
  - name: Questions
    description: The questions on a topic
  - name: Answers
    description: The answers to the questions

paths:
  /login:
    get:
      summary: Manage the login accepted request from ESN Accounts and prepare a token to authenticate the user
      description: Acquire the CAS ticket, validate it, create the user (if necessary) and return a token.
      tags: [Login]
      parameters:
        - name: ticket
          in: query
          description: The CAS ticket of successful login with ESN Accounts
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
  /configurations:
    get:
      summary: Get the platform's configurations
      description: Requires to be Administrator
      tags: [Configurations]
      security:
        - AuthFunction: []
      responses:
        200:
          $ref: '#/components/responses/Configurations'
    put:
      summary: Edit the platform's configurations
      description: Requires to be Administrator
      tags: [Configurations]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Configurations'
      responses:
        200:
          $ref: '#/components/responses/Configurations'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Set specific configurations
      tags: [Configurations]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum:
                    - GET_EMAIL_TEMPLATE_QUESTIONS
                    - GET_EMAIL_TEMPLATE_ANSWERS
                    - SET_EMAIL_TEMPLATE_QUESTIONS
                    - SET_EMAIL_TEMPLATE_ANSWERS
                    - RESET_EMAIL_TEMPLATE_QUESTIONS
                    - RESET_EMAIL_TEMPLATE_ANSWERS
                    - TEST_EMAIL_TEMPLATE_QUESTIONS
                    - TEST_EMAIL_TEMPLATE_ANSWERS
                subject:
                  type: string
                  description: (SET_EMAIL_TEMPLATE_QUESTIONS, SET_EMAIL_TEMPLATE_ANSWERS)
                content:
                  type: string
                  description: (SET_EMAIL_TEMPLATE_QUESTIONS, SET_EMAIL_TEMPLATE_ANSWERS)
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /categories:
    get:
      summary: Get the categories
      tags: [Categories]
      security:
        - AuthFunction: []
      parameters:
        - name: all
          in: query
          description: Whether to include archived categories
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/responses/Categories'
    post:
      summary: Insert a new category
      description: Requires to be Administrator
      tags: [Categories]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        200:
          $ref: '#/components/responses/Category'
        400:
          $ref: '#/components/responses/BadParameters'
  /categories/{categoryId}:
    get:
      summary: Get a category
      tags: [Categories]
      security:
        - AuthFunction: []
      parameters:
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Category'
    put:
      summary: Edit a category
      description: Requires to be Administrator
      tags: [Categories]
      security:
        - AuthFunction: []
      parameters:
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        200:
          $ref: '#/components/responses/Category'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on a category
      tags: [Categories]
      security:
        - AuthFunction: []
      parameters:
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [ARCHIVE, UNARCHIVE]
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete a category
      description: Requires to be Administrator; it works only if it's not used in any topic.
      tags: [Categories]
      security:
        - AuthFunction: []
      parameters:
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /events:
    get:
      summary: Get the events
      tags: [Events]
      security:
        - AuthFunction: []
      parameters:
        - name: all
          in: query
          description: Whether to include archived events
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/responses/Events'
    post:
      summary: Insert a new event
      description: Requires to be Administrator
      tags: [Events]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        200:
          $ref: '#/components/responses/Event'
        400:
          $ref: '#/components/responses/BadParameters'
  /events/{eventId}:
    get:
      summary: Get an event
      tags: [Events]
      security:
        - AuthFunction: []
      parameters:
        - name: eventId
          in: path
          description: Event ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Event'
    put:
      summary: Edit an event
      description: Requires to be Administrator
      tags: [Events]
      security:
        - AuthFunction: []
      parameters:
        - name: eventId
          in: path
          description: Event ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        200:
          $ref: '#/components/responses/Event'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on an event
      tags: [Events]
      security:
        - AuthFunction: []
      parameters:
        - name: eventId
          in: path
          description: Event ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [ARCHIVE, UNARCHIVE]
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete an event
      description: Requires to be Administrator; it works only if it's not used in any topic.
      tags: [Events]
      security:
        - AuthFunction: []
      parameters:
        - name: eventId
          in: path
          description: Event ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /topics:
    get:
      summary: Get the topics
      tags: [Topics]
      security:
        - AuthFunction: []
      responses:
        200:
          $ref: '#/components/responses/Topics'
    post:
      summary: Insert a new topic
      description: Requires to be Administrator
      tags: [Topics]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
      responses:
        200:
          $ref: '#/components/responses/Topic'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on the topics
      tags: [Topics]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [GET_ATTACHMENT_UPLOAD_URL, GET_ATTACHMENT_DOWNLOAD_URL]
                attachmentId:
                  type: string
                  description: (GET_ATTACHMENT_DOWNLOAD_URL)
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /topics/{topicId}:
    get:
      summary: Get a topic
      tags: [Topics]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: archived
          in: query
          description: Whether to filter based on the archivation status
          schema:
            type: boolean
        - name: categoryId
          in: query
          description: The category ID to filter
          schema:
            type: string
        - name: eventId
          in: query
          description: The event ID to filter
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Topic'
    put:
      summary: Edit a topic
      description: Requires to be Administrator
      tags: [Topics]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
      responses:
        200:
          $ref: '#/components/responses/Topic'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete a topic
      description: Requires to be Administrator
      tags: [Topics]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on a topic
      tags: [Topics]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [OPEN, CLOSE, ARCHIVE, UNARCHIVE]
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /topics/{topicId}/related:
    get:
      summary: Get the related topics
      tags: [Topics]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Topics'
  /topics/{topicId}/related/{relatedId}:
    post:
      summary: Link two topics together
      description: Requires to be Administrator
      tags: [Topics]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: relatedId
          in: path
          description: Related Topic ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
      responses:
        200:
          $ref: '#/components/responses/Topic'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete the relation between two topics
      description: Requires to be Administrator
      tags: [Topics]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: relatedId
          in: path
          description: Related Topic ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /topics/{topicId}/questions:
    get:
      summary: Get the questions of a topic
      tags: [Questions]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Questions'
    post:
      summary: Insert a new question on a topic
      description: Permissions depend on topic configuration
      tags: [Questions]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        200:
          $ref: '#/components/responses/Question'
        400:
          $ref: '#/components/responses/BadParameters'
  /topics/{topicId}/questions/{questionId}:
    get:
      summary: Get the question on a topic
      tags: [Questions]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: questionId
          in: path
          description: Question ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Question'
    put:
      summary: Edit the question on a topic
      description: Requires to be Administrator or the creator
      tags: [Questions]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: questionId
          in: path
          description: Question ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        200:
          $ref: '#/components/responses/Question'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on a question
      tags: [Questions]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: questionId
          in: path
          description: Question ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [UPVOTE, UPVOTE_CANCEL, IS_UPVOTED]
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete the question on a topic
      description: Requires to be Administrator or the creator
      tags: [Questions]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: questionId
          in: path
          description: Question ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /topics/{topicId}/questions/{questionId}/answers:
    get:
      summary: Get the answers to a question
      tags: [Answers]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: questionId
          in: path
          description: Question ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Answers'
    post:
      summary: Insert a new answer to a question
      description: Requires to be Administrator or a subject of the topic
      tags: [Answers]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: questionId
          in: path
          description: Question ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Answer'
      responses:
        200:
          $ref: '#/components/responses/Answer'
        400:
          $ref: '#/components/responses/BadParameters'
  /topics/{topicId}/questions/{questionId}/answers/{answerId}:
    get:
      summary: Get the answer to a question
      tags: [Answers]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: questionId
          in: path
          description: Question ID
          required: true
          schema:
            type: string
        - name: answerId
          in: path
          description: Answer ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Answer'
    put:
      summary: Edit the answer to a question
      description: Requires to be Administrator or the creator
      tags: [Answers]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: questionId
          in: path
          description: Question ID
          required: true
          schema:
            type: string
        - name: answerId
          in: path
          description: Answer ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Answer'
      responses:
        200:
          $ref: '#/components/responses/Answer'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete the answer to a question
      description: Requires to be Administrator or the creator
      tags: [Answers]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: questionId
          in: path
          description: Question ID
          required: true
          schema:
            type: string
        - name: answerId
          in: path
          description: Answer ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'

components:
  schemas:
    Configurations:
      type: object
      additionalProperties: {}
    Category:
      type: object
      additionalProperties: {}
    Event:
      type: object
      additionalProperties: {}
    Topic:
      type: object
      additionalProperties: {}
    Question:
      type: object
      additionalProperties: {}
    Answer:
      type: object
      additionalProperties: {}

  responses:
    Configurations:
      description: The platform' configurations
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Configurations'
    Category:
      description: A category
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Category'
    Categories:
      description: The categories
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Category'
    Event:
      description: An event
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Event'
    Events:
      description: The events
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Event'
    Topic:
      description: A topic
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Topic'
    Topics:
      description: The topics
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Topic'
    Question:
      description: A question
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Question'
    Questions:
      description: The questions
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Question'
    Answer:
      description: An answer
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Answer'
    Answers:
      description: The answers
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Answer'
    BadParameters:
      description: Bad input parameters
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: The request isn't valid
    OperationCompleted:
      description: Operation completed

  securitySchemes:
    AuthFunction:
      type: apiKey
      name: Authorization
      in: header
