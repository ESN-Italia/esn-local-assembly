openapi: 3.0.3

info:
  title: ESN GA Candidates app
  version: 0.0.1
  contact:
    name: Matteo Carbone
    email: email@matteocarbone.com
    url: https://matteocarbone.com

servers:
  - url: https://api.esn-ga.link/{environment}
    variables:
      environment:
        enum: [dev, prod]
        default: dev
        description: The API stage

externalDocs:
  description: Models documentation
  url: https://github.com/uatisdeproblem/esn-ga/tree/main/back-end/src/models

tags:
  - name: Login
    description: Access the platform
  - name: Events
    description: The platform's events

paths:
  /login:
    get:
      summary: Manage the login accepted request from Galaxy and prepare a token to authenticate the user
      description: Acquire the CAS ticket, validate it, create the user (if necessary) and return a token.
      tags: [Login]
      parameters:
        - name: ticket
          in: query
          description: The CAS ticket of successful login with Galaxy
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
  /events:
    get:
      summary: Get the events
      tags: [Events]
      security:
        - AuthFunction: []
      responses:
        200:
          $ref: '#/components/responses/Events'
    post:
      summary: Insert a new event
      tags: [Events]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        200:
          $ref: '#/components/responses/Event'
        400:
          $ref: '#/components/responses/BadParameters'
  /events/{eventId}:
    get:
      summary: Get an event
      tags: [Events]
      parameters:
        - name: eventId
          in: path
          description: Event ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Event'
    put:
      summary: Edit an event
      tags: [Events]
      security:
        - AuthFunction: []
      parameters:
        - name: eventId
          in: path
          description: Event ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        200:
          $ref: '#/components/responses/Event'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete an event
      tags: [Events]
      security:
        - AuthFunction: []
      parameters:
        - name: eventId
          in: path
          description: Event ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'

components:
  schemas:
    Event:
      type: object
      additionalProperties: {}

  responses:
    Event:
      description: An event
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Event'
    Events:
      description: The events
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Event'
    BadParameters:
      description: Bad input parameters
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: The request isn't valid
    OperationCompleted:
      description: Operation completed

  securitySchemes:
    AuthFunction:
      type: apiKey
      name: Authorization
      in: header
